#include "arbore.h"
#include <stdio.h>
#include <stdlib.h>

void transplant(t_arbore *a, t_nod_arb* u, t_nod_arb* v)
{ if (u->parent=NULL)
		a->root=v;
  else if(u==u->parent->left)
	  u->parent->left=v;
  else u->parent->right=v;
  if(v!=NULL)
	  v->parent=u->parent;

}


void preorder_walk(t_nod_arb *root)
{  if (root!=NULL)
	{
	printf("%d", root->key);
	preorder_walk(root->left);
	preorder_walk(root->right);
	}
}

void inorder_walk(t_nod_arb *root)
{  if (root!=NULL)
	{
	
	inorder_walk(root->left);
	printf("%d", root->key);
	inorder_walk(root->right);
	}

}

void postorder_walk(t_nod_arb *root)
{  if (root!=NULL)
	{
	
	postorder_walk(root->left);
	postorder_walk(root->right);
	printf("%d", root->key);
	}
}


void make_root(t_arbore *a, int key)
{ a->root= (t_nod_arb*)malloc (sizeof(t_nod_arb));
  a->root->key=key;
  a->root->left=NULL;
  a->root->right=NULL;
  a->root->parent=NULL;
}


t_nod_arb* create_nod(int key)
{ t_nod_arb* n= (t_nod_arb*) malloc (sizeof(t_nod_arb));
  n->key=key;
  n->left=NULL;
  n->right=NULL;
  n->parent=NULL;
  return n;
}


t_nod_arb* tree_min (t_nod_arb* n)
{ while (n->left!=NULL)
{	n=n->left;}

return n;
}


t_nod_arb* tree_max (t_nod_arb* n)
{ while (n->right!=NULL)
{	n=n->right;}

return n;
}


t_nod_arb* tree_search(t_nod_arb* n, int key)
{  if (n==NULL||key==n->key)
		return n;
   if (key<n->key)
	   return tree_search(n->left, key);
   else return tree_search (n->right, key);
}


t_nod_arb* it_tree_search(t_nod_arb* n, int key)
{  while (n!=NULL&&key!=n->key)
	{ if (key<n->key)
		n=n->left;
	 else n=n->right;
	}
return n;
}



void tree_insert(t_arbore* a, t_nod_arb* n)
{  t_nod_arb* y;
   t_nod_arb* x;

   y=NULL;
   x=a->root;

   while (x!=NULL)
	  { y=x;
		if (n->key<x->key)
			x=x->left;
		else x=x->right;
		}
  n->parent=y;
  if (y==NULL)
	  a->root=n;
  else if (n->key<y->key)
	  y->left=n;
  else y->right=n;
	
}


t_nod_arb* tree_succesor(t_nod_arb* n)
{	t_nod_arb* y;
    t_nod_arb* x;

   if (n->right!=NULL)
	   return tree_min(n->right);

   y=n->parent;

   while (y!=NULL&&x==y->right)
   {n=y;
   y=y->parent;
   
   }
   return y;
}


void tree_delete(t_arbore* a, t_nod_arb* n)
{ t_nod_arb* y;

if (n->left==NULL)
	transplant(a,n,n->right);
else if (n->right=NULL)
	transplant(a,n,n->left);
else 
	{ y=tree_min(n->right);
	if (y->parent!=n)
		{transplant(a, y, y->right);
		y->right=n->right;
		y->right->parent=y;
		}
	transplant(a,n,y);
	y->left=n->left;
	y->left->parent=y;
	}
}


#include "arbore.h"
#include <stdio.h>
#include <stdlib.h>

main()
{ t_arbore *T;
  t_nod_arb *n;
  int x;

  printf("x="); scanf("%d", &x);
  make_root(T,x);
  printf("Introduceti x pana la citirea 0");
  printf("x="); scanf("%d", &x);

   while (x)
   {n=create_nod(x);
   tree_insert(T,n);
   printf("x="); scanf("%d", &x);
   }

   printf("In-order walk:\n");
   inorder_walk(T);
   printf("Pre-order walk:\n");
   preorder_walk(T);
   printf("Post-order walk:\n");
   postorder_walk(T);

   printf("\n");

   printf("Regasire nod x=");scanf("%d", &x);
   
   n=it_tree_search(T->root,x);

   if (n!=NULL)
	   printf("Nodul cu cheia %d gasit iterativ", n->key);
   else 
       printf("Nodul nu a fost gasit iterative");
   n=tree_search(T->root,x);

   if(n!=NULL)
     printf("Nodul cu cheia %d a fost gasit recursiv", n->key);
   else printf("Nodul nu a fost gasit recursiv");

   n=tree_min(T->root);
   printf("Tree minimum", n->key);
   n=tree_max(T->root);
   printf("Tree maximum", n->key);


   n=tree_succesor(T->root);
   if (n!=NULL)
	   printf("Nod succesor:%d", n->key);
   else printf("NULL");

   printf("Sterge nod cu cheia x=");
   scanf("%d", &x);

   n=tree_search(T->root,x);
   
   if (n!=NULL)
   {tree_delete(T,n);
   printf("Nod sters");
   inorder_walk(T);
   }
   else printf("Nod negasit");

}

#ifndef _arbores
#define _arbores

typedef struct nod_arb
{	int key;
	struct nod_arb *left, *right, *parent;
} t_nod_arb;

typedef struct
{  t_nod_arb *root;
}t_arbore;


void preorder_walk(t_nod_arb *root);
void inorder_walk(t_nod_arb *root);
void postorder_walk(t_nod_arb *root);
void make_root(t_arbore *a, int key);
t_nod_arb* create_nod(int key);
t_nod_arb* tree_min (t_nod_arb* n);
t_nod_arb* tree_max (t_nod_arb* n);
t_nod_arb* it_tree_search(t_nod_arb* n, int key);
t_nod_arb* tree_search(t_nod_arb* n, int key);
void tree_insert(t_arbore *a, t_nod_arb* n);
t_nod_arb* tree_succesor(t_nod_arb* n);
void tree_delete(t_arbore *a, t_nod_arb* n);


#endif